<?xml version="1.0" ?>

<project name="test-drupal" default="verify-custom">

<!-- ## Helper targets

These targets are used throughout the project and should normally not be
executed directly.-->

<!-- ### Initialization

This target sets up many of the common resources used throughout the build.
All other targets except dependencies for this target should depend on this
unless specifically stated why. -->
  <target name="init"
          depends="load-properties, setup-dirs, setup-filesets"
          unless="project.initialized">
    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

<!-- ### Load properties

Loads a set of project specific properties from a `.properties` file.

These properties contain information regarding the individual project and/or
environment such as which version of Drupal you are using, how to create a
database and the names of your custom modules.

All available properties are described and set to a default value in
[`build.default.properties`] You should create your own properties file by copying the
`build.default.properties` file to the root directory, rename it
`build.properties` and modify it according to your project.

Both property files are loaded so your custom `build.properties` file should
only contain properties where you want to override the default value e.g. set
your custom module code prefix or use a special version of one of the build
tools. -->
  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
<!-- By default Jenkins runs Phing from the directory containing the build
file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

NB: This only works if the subdirectory is directly within the Drupal
root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
               project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

<!-- ### Setup directories

Define working directories - where the individual parts of the build are and
should be located. These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-dirs"
          depends="load-properties">
    <if>
      <isset property="drupal.make.dir"/>
      <then>
        <property name="project.drupal.dir"
                value="${project.basedir}/${drupal.make.dir}" />
      </then>
      <else>
        <property name="project.drupal.dir"
                value="${project.basedir}" />
      </else>
    </if>

    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />
    <property name="project.builddir"
              value="${project.basedir}/build" />
    <!-- Useful to make the current buildtime available as a property -->
    <tstamp>
        <!-- Format is, 201207011202 YYYYMMDDHHMM -->
        <format property="buildtime" pattern="%Y%m%d%H%M"/>
    </tstamp>              
    <property name="project.currentbuilddir"
              value="${project.builddir}/${buildtime}" />              
    <property name="project.toolsdir"
              value="${project.builddir}/tools" />
    <property name="project.coveragedir"
              value="${project.currentbuilddir}/coverage" />
    <property name="project.logdir"
              value="${project.currentbuilddir}/logs" />
    <property name="project.testdir"
              value="${project.currentbuilddir}/tests" />
    <!-- Using mkdir with a property -->
    <mkdir dir="${project.currentbuilddir}" />              
    <mkdir dir="${project.coveragedir}" />    
    <mkdir dir="${project.logdir}" />
    <mkdir dir="${project.testdir}" />        
  </target>

<!-- ### Setup file sets

Setup file sets - patterns for different aspects of the source code.
These are used in other targets.

This is part of the initialization of the build. This target should only be
called from `init` target. -->
  <target name="setup-filesets"
          depends="load-properties">
    <!-- Define pattern sets for future reference -->

    <!-- PHP files -->
    <patternset id="php">
      <include name="**/*.php" />
      <include name="**/*.module" />
      <include name="**/*.install" />
      <include name="**/*.inc" />
      <include name="**/*.profile" />
      <include name="**/*.test" />
    </patternset>

    <!-- Javascript files -->
    <patternset id="js">
      <include name="**/*.js" />
      <!-- Minimized JavaScript files should not be analyzed.
           In their optimized state they can not be expexted
           to conform to coding standards. -->
      <exclude name="**/*.min.js" />
    </patternset>

    <!-- CSS files -->
    <patternset id="css">
      <include name="**/*.css" />
    </patternset>

    <!-- Directories for community contributed code. We exclude these from
         code analysis as we cannot be held responsible for any problems
         here. -->
    <patternset id="contrib">
      <exclude name="**/contrib/**/*.*" />
      <exclude name="**/libraries/**/*.*" />
    </patternset>

    <!-- We exclude generated files from We exclude these from code analysis
         as we cannot be held responsible for any problems here. -->
    <patternset id="generated">
      <exclude name="**/*.features.*" />
      <exclude name="**/*.field_group.inc" />
      <exclude name="**/*.layouts.inc" />
      <exclude name="**/*.pages_default.inc" />
      <exclude name="**/*.panels_default.inc" />
      <exclude name="**/*.strongarm.inc" />
      <exclude name="**/*.views_default.inc" />
    </patternset>

    <!-- Define file sets for future reference -->

    <!-- All PHP files -->
    <fileset id="src.php" dir="${project.drupal.dir}">
      <patternset refid="php"/>
    </fileset>

    <!-- Custom PHP files -->
    <fileset id="src.php.custom" dir="${project.sitesdir}">
      <patternset refid="php"/>
      <patternset refid="contrib"/>
      <patternset refid="generated"/>
    </fileset>

    <!-- All Javascript files -->
    <fileset id="src.js" dir="${project.drupal.dir}">
      <patternset refid="js" />
    </fileset>

    <!-- Custom Javascript files -->
    <fileset id="src.js.custom" dir="${project.sitesdir}">
      <patternset refid="js" />
      <patternset refid="contrib" />
    </fileset>

    <!-- All CSS files -->
    <fileset id="src.css" dir="${project.basedir}">
      <patternset refid="css" />
    </fileset>

    <!-- Custom CSS files -->
    <fileset id="src.css.custom" dir="${project.sitesdir}">
      <patternset refid="css" />
      <patternset refid="contrib" />
    </fileset>

  </target>

  <!-- ### Clone a git repository -->
  <target name="setup-git-repo">
    <!-- Only clone if repository does not exist already -->
    <if>
      <not><available file="${repo.dir}" /></not>
      <then>
        <!-- Set revision to HEAD if not already defined -->
        <property name="repo.revision" value="HEAD" override="false"/>

        <echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}</echo>
        <!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask)
             does not seem to work. Use exec instead. -->
        <exec command="git clone ${repo.url} ${repo.dir}" />
        <exec command="git checkout ${repo.revision}" dir="${repo.dir}"/>
      </then>
    </if>
  </target>

<!-- ### Setup Rhino

[Mozilla Rhino](http://www.mozilla.org/rhino/) is an open-source implementation of JavaScript written in Java. -->
   <target name="setup-rhino"
           depends="setup-dirs"
           unless="project.rhino.setup">
     <property name="rhino.dir"
               value="${project.toolsdir}/rhino" />
     <php function="basename" returnProperty="rhino.basename">
       <param value="${rhino.url}" />
       <!-- We assume that the version of Rhino used is a distribution
            where the filename ends in `.zip` -->
       <param value=".zip" />
     </php>

     <!-- Other targets use this property to determine the location of the
          `js.jar` file -->
     <property name="rhino.jar"
               value="${rhino.dir}/${rhino.basename}/js.jar"/>

     <!-- If the Rhino js.jar file is not available then download and
          unpack Rhino -->
     <if>
       <not><available file="${rhino.jar}"/></not>
       <then>
         <mkdir dir="${rhino.dir}" />
         <php function="basename" returnProperty="rhino.zipfile">
           <param value="${rhino.url}" />
         </php>
         <httpget url="${rhino.url}"
                  dir="${rhino.dir}"
                  proxy="${phing.httpget.proxy}"/>
         <unzip file="${rhino.dir}/${rhino.zipfile}"
                todir="${rhino.dir}" />
       </then>
     </if>

     <!-- Set property to prevent unnecessary additional invocations of this
          target -->
     <property name="project.rhino.setup" value="true" />
   </target>

<!-- ### Clean working environment  -->
  <target name="clean"
          description="Clean up and create artifact directories"
          depends="setup-dirs"
          unless="project.cleaned">
    <!-- Delete any existing artifacts from a previous build.
         Do not delete builddir. It may contain the build file! -->
    <delete dir="${project.toolsdir}"/>
    <!-- Verbose. We need to make sure any database is deleted. Reinstalling
         the site with an existing database causes the build to fail. -->
    <delete file="${project.drupal.dir}/database.sqlite" verbose="true" />
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>

    <!-- Recreate directories for artifacts -->
    <mkdir dir="${project.toolsdir}"/>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.cleaned" value="true"/>
  </target>

<!-- ## END Helper targets -->

<!-- ### PHP linting

Check files for syntax errors. -->
  <target name="lint-php-all"
          description="Check all PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint haltonfailure="true" tofile="${project.logdir}/php-lint-errors.log">
      <fileset refid="src.php" />
    </phplint>
  </target>

  <target name="lint-php-custom"
          description="Check custom PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint haltonfailure="true" tofile="${project.logdir}/php-lint-errors.log">
      <fileset refid="src.php.custom" />
    </phplint>
  </target>

<!-- ### Javascript linting

Checks code against [jslint](http://www.jslint.com/) to assure a coding
standard is followed and detect potential problems. By default
[jslint´](https://github.com/mikewest/JSLint) is used. -->
  <target name="lint-js-all"
          description="Check all Javascript files using JSlint"
          depends="init, setup-jslint4java, setup-jslint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js"/>
    </foreach>
  </target>

  <target name="lint-js-custom"
          description="Check custom Javascript files using JSlint"
          depends="init, setup-jslint4java, setup-jslint">
    <foreach target="jslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.js.custom"/>
    </foreach>
  </target>

<!-- #### jslint a file

No need to run `init` or setup targets here. This target should only be called
from parent `lint-js` targets. -->
  <target name="jslint-file">
    <echo>Linting file: ${absfilename}</echo>

    <!-- Execute jslint4java and return the result in checkstyle format-->
    <exec command="java -jar ${jslint4java.file}
                   --jslint ${jslint.file} --report checkstyle ${absfilename}"
          outputProperty="report" />

    <!-- Print the result to a file.
         Replace / with - in path to create legal filenames in the format
         `checkstyle-jslint-dir1-dir2-file.js.xml`. -->
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/" />
      <param value="-" />
      <param value="${filename}" />
    </php>
    <delete file="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
    <append text="${report}"  destFile="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />
  </target>

  <!-- #### Setup jslint4java -->
  <target name="setup-jslint4java"
          depends="init"
          unless="project.jslint4java.setup">
    <property name="jslint4java.dir"
              value="${project.toolsdir}/jslint4java" />
    <php function="basename" returnProperty="jslint4java.basename">
      <param value="${jslint4java.url}" />
      <!-- We assume that the version of jslint4java used is a distribution
           where the filename ends in `-dist.zip` -->
      <param value="-dist.zip" />
    </php>

    <!-- Download and unpack jslint4java -->
    <mkdir dir="${jslint4java.dir}" />
    <php function="basename" returnProperty="jslint4java.zipfile">
      <param value="${jslint4java.url}" />
    </php>
    <httpget url="${jslint4java.url}"
             dir="${jslint4java.dir}"
             proxy="${phing.httpget.proxy}" />
    <unzip file="${jslint4java.dir}/${jslint4java.zipfile}"
           todir="${jslint4java.dir}" />

    <!-- Other targets use this property to determine the location of the
         `jslint4java.jar` file -->
    <property name="jslint4java.file"
 value="${jslint4java.dir}/${jslint4java.basename}/${jslint4java.basename}.jar"/>

    <!-- Set property to prevent unnecessary additional invocations of this
         target -->
    <property name="project.jslint4java.setup" value="true" />
  </target>

  <!-- #### Setup jslint -->
  <target name="setup-jslint"
          depends="init"
          unless="project.jslint.setup">
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/jslint"/>
      <property name="repo.url" value="${jslint.repository.url}" />
    </phingcall>

    <!-- Other targets use this property to determine the location of the jslint
         file -->
    <property name="jslint.file"
              value="${project.toolsdir}/jslint/${jslint.file}"
              override="true" />

    <!-- Set property to prevent unnecessary additional invocations of this
         target -->
    <property name="project.jslint.setup" value="true" />
  </target>

<!-- ### CSS linting

Checks code against [CSS Lint](http://www.csslint.net/) to help point out problems with CSS code. It does basic syntax checking as well as applying a set of rules to the code that look for problematic patterns or signs of inefficiency. -->
  <target name="lint-css-all"
          description="Check all CSS files using CSS Lint"
          depends="init, setup-rhino, setup-csslint">
    <foreach target="csslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css"/>
    </foreach>
  </target>

  <target name="lint-css-custom"
          description="Check custom CSS files using CSS Lint"
          depends="init, setup-rhino, setup-csslint">
    <foreach target="csslint-file" param="filename" absparam="absfilename">
      <fileset refid="src.css.custom"/>
    </foreach>
  </target>

<!-- #### csslint a file

No need to run `init` or setup targets here. This target should only be called
from parent `lint-css` targets. -->
  <target name="csslint-file">
    <echo>Linting file: ${absfilename}</echo>

    <!-- Run csslint through Rhino and return the result in
         checkstyle format-->
    <exec command="java -jar ${rhino.jar} ${csslint.rhino.file}
                   --format=checkstyle-xml --rules=${csslint.rules}
                   ${absfilename}"
          outputProperty="report" />

    <!-- Print the result to a file.
         Replace / with - in path to create legal filenames in the format
         `checkstyle-csslint-dir1-dir2-file.css.xml`. -->
    <php function="str_replace" returnProperty="filename.normalized">
      <param value="/" />
      <param value="-" />
      <param value="${filename}" />
    </php>

    <property name="csslint.report.file" value="${project.logdir}/checkstyle-csslint-${filename.normalized}.xml" />
    <delete file="${csslint.report.file}" />
    <append text="${report}"  destFile="${csslint.report.file}" />


    <!-- Cleanup the break rules property.
         Hyphens are removed to support both input and output rule format.
         csslint-rule becomes CsslintRule.
         Seperators (Commas and multiple whitespace characters) are reduced
         to a pipe to be used in a regular expression. -->
         <php expression="str_replace('-', '', '${csslint.rules.break}')"
              returnProperty="csslint.rules.break"/>
         <php expression="preg_replace('/(\s+|\s*,\s*)/', '|', '${csslint.rules.break}')"
              returnProperty="csslint.rules.break"/>

    <!-- If any rules which require the build to break are defined then
         look for them. -->
    <if>
      <not>
        <equals arg1="${csslint.rules.break}" arg2="" />
      </not>
      <then>
        <!-- CSS Lint reports checkstyle errors using the format
             net.csslint.RuleName. Load all checkstyle reports and look for
             errors with such a source from the provided rules. -->
        <loadfile property="csslint.break.errors"
                  file="${csslint.report.file}">
          <filterchain>
            <linecontainsregexp>
                <regexp pattern="(net\.csslint\.(${csslint.rules.break}))"
                        ignoreCase="true" />
              </linecontainsregexp>
          </filterchain>
        </loadfile>

        <!-- Break if any errors from the provided rules are detected! -->
        <if>
          <not>
            <equals arg1="${csslint.break.errors}" arg2="" />
          </not>
          <then>
            <fail message="CSS error detected in file ${absfilename}" />
          </then>
        </if>
      </then>
    </if>
  </target>

   <!-- #### Setup csslint -->
   <target name="setup-csslint"
           depends="init"
           unless="project.csslint.setup">
     <phingcall target="setup-git-repo">
       <property name="repo.dir"
                 value="${project.toolsdir}/csslint"/>
       <property name="repo.url"
                 value="${csslint.repository.url}" />
       <property name="repo.revision"
                 value="${csslint.repository.revision}" />
     </phingcall>

     <!-- Other targets use this property to determine the location of the
          csslint rhino file -->
     <property name="csslint.rhino.file"
               value="${project.toolsdir}/csslint/release/csslint-rhino.js" />

     <!-- Set property to prevent unnecessary additional invocations of this
          target -->
     <property name="project.csslint.setup" value="true" />
   </target>

<!-- ### Debug code detection

Code should not call functions which are usually used for debugging.
This belongs on developer environments - not VCS. This goes for mentioning
them in comments as well. -->
  <target name="check-php-debug"
          description="Check custom PHP code for debug statements"
          depends="init">
    <phingcall target="check-debug">
      <property name="debug.language" value="PHP" override="true" />
      <property name="debug.pattern" value="(var_dump\(|dsm\(|dpm\()"
                override="true" />
      <property name="debug.fileset" value="src.php.custom"/>
    </phingcall>
  </target>

  <target name="check-js-debug"
          description="Check custom Javascript code for debug statements">
    <phingcall target="check-debug">
      <property name="debug.language" value="Javascript" override="true" />
      <property name="debug.pattern" value="(console\.log\()" override="true" />
      <property name="debug.fileset" value="src.js.custom"/>
    </phingcall>
  </target>

  <!-- #### Check a fileset for debug code -->
  <target name="check-debug"
          depends="init">
    <php function="strtolower" returnProperty="debug.language.lower">
      <param value="${debug.language}" />
    </php>
    <property name="debug.output"
              value="${project.logdir}/debug_${debug.language.lower}.txt"
              override="true" />
    <delete file="${debug.output}"/>
    <append text="" destFile="${debug.output}" />

    <foreach target="check-debug-file" param="filename"
             absparam="absfilename">
      <fileset refid="${debug.fileset}"/>
    </foreach>

    <loadfile property="debug.lines" file="${debug.output}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="" />
      </not>
      <then>
        <fail message="${debug.language} debug code detected:${line.separator}
                       ${debug.lines}" />
      </then>
    </if>
  </target>

<!-- #### Check an individual file for debug code

No need to run `init` here. This target should only be called through parent
`check-debug` target. -->
  <target name="check-debug-file">
    <echo>Checking file for debug statements: ${absfilename}</echo>
    <loadfile property="debug.lines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="${debug.pattern}" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}
                      ${debug.lines}${line.separator}
                      ${line.separator}"
                destFile="${debug.output}"/>
      </then>
    </if>
  </target>

<!-- ### Detect code mess

Uses [PHPMD](http://phpmd.org/) to detect code mess and look for potential
problems. -->
  <target name="phpmd"
          description="Generate pmd.xml using PHPMD"
          depends="init">
    <!-- We do not use the unusedcode ruleset as Drupal hook implementations
         usually are declared with all arguements but may not use them
         all. -->
    <phpmd rulesets="codesize,naming,design">
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="${project.logdir}/pmd.xml"/>
    </phpmd>
  </target>

<!-- ### Detect potential copy/pasting

Uses [phpcpd](https://github.com/sebastianbergmann/phpcpd) to detect duplicate
code. This indicates potential refactorings.-->
  <target name="phpcpd"
          description="Generate pmd-cpd.xml using phpcpd"
          depends="init">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="${project.logdir}/pmd-cpd.xml"/>
    </phpcpd>
  </target>

<!-- ### Generate code statistics

Measures the size of the project using
[phploc](http://sebastianbergmann.github.com/phploc/) and generates
statistics. -->
  <target name="phploc"
          description="Generate phploc.csv using phploc"
          depends="init, setup-phing-phploc">
    <!-- Suffixes should be the same as included in the
         src.php filesets -->
    <phploc reportType="csv"
            reportName="phploc" reportDirectory="${project.logdir}"
            suffixes="php,module,inc,install,profile,test" countTests="true">
      <fileset refid="src.php.custom" />
    </phploc>
  </target>

  <!-- #### Setup Phing phploc integration -->
  <target name="setup-phing-phploc"
          depends="init" >
    <!-- Clone the project -->
    <phingcall target="setup-git-repo">
      <property name="repo.dir" value="${project.toolsdir}/phing-phploc"/>
      <property name="repo.url" value="${phing.phploc.repository.url}" />
    </phingcall>
    <!-- Register the custom Phing task -->
    <taskdef name="phploc" classname="PHPLocTask"
             classpath="${project.toolsdir}/phing-phploc" />
  </target>

<!-- ### Review code using PHP_CodeSniffer

The purpose and outcome of this target is the same as the coder-review
targets. In general [PHP_CodeSniffer](http://pear.php.net/package/PHP_CodeSniffer/)
is faster, and as of July 3 2012, http://drupal.org/node/1670316 has a better coverage.
[Drupal coding standards](http://drupal.org/coding-standards).

-->
    <target name="phpcs"
            description="Generate checkstyle.xml using PHP_CodeSniffer and drupalcs"
            depends="init">
      <!-- There is no Phing task for PHP Codesniffer in v2.4.6.
           It's coming for v2.5. Execute while we wait. -->
      <exec command="phpcs --report=checkstyle
                    --report-file=${project.logdir}/checkstyle-codesniffer.xml
                    --standard=Drupal
                    --extensions=php,inc,module
                    --ignore=*/contrib/*,*/*.features.*,*/*.field_group.inc,*/*.layout.*,*/*.pages_default.*,*/*.panels_default.*,*/*strongarm.inc,*/*.views_default.inc
                    ${project.sitesdir}"
            logoutput="true" />
    </target>

<!-- ### Coding Standards

Perform Shallow Site Quality Checks, coding standards, syntax errors, etc.. . -->

  <target name="verify-custom"
          description="Perform Shallow Site Quality Checks, coding standards, syntax errors, etc.. on custom directories"
          depends="lint-php-custom,
          lint-css-custom,
          lint-js-custom,
          lint-php-custom,
          phpcpd,
          phploc,
          phpmd,
          check-php-debug,
          check-js-debug">

  </target>

  <target name="verify-all"
          description="Perform Shallow Site Quality Checks, coding standards, syntax errors, etc.. on all directories"
          depends="lint-php-all">
  </target>

</project>
